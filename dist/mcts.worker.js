"use strict";(()=>{var M=r=>r==="X"?"O":"X",w=(r,e)=>r[0]===e[0]&&r[1]===e[1],W=r=>r==="X"||r==="O";var h=(r,e,t)=>{let n=e+t*3;return r|1<<n},x=(r,e,t)=>{let n=e+t*3;return r&~(1<<n)},p=(r,e,t)=>{let n=e+t*3;return r>>n&1},B=r=>(r&448)===448||(r&56)===56||(r&7)===7||(r&292)===292||(r&146)===146||(r&73)===73||(r&273)===273||(r&84)===84,C=(r,e)=>{let t=B(r),n=B(e);return t?"X":n?"O":(r|e)===511?"draw":"none"},G={aSubgridBitboard:[0,0,0,0,0,0,0,0,0],bSubgridBitboard:[0,0,0,0,0,0,0,0,0],activeSubgrid:"any",playerToMove:"X",complete:!1,moves:[]},f=class r{constructor(e){this.currentState=e||structuredClone(G)}reset(){this.currentState=structuredClone(G)}copy(){return new r(structuredClone(this.currentState))}checkWinSubgrid(e){let t=e[0]+e[1]*3,n=this.currentState.aSubgridBitboard[t],o=this.currentState.bSubgridBitboard[t];return C(n,o)}checkWinWholeBoard(){let e=0,t=0,n=0;for(let a=0;a<3;a++)for(let l=0;l<3;l++){let i=this.checkWinSubgrid([a,l]);i==="X"?e=h(e,a,l):i==="O"?t=h(t,a,l):i==="draw"&&(n=h(n,a,l))}let o=C(e,t);return W(o)?o:o==="draw"||(e|t|n)===511?"draw":"none"}doMove(e){let{coordinate:t,player:n}=e,{aSubgridBitboard:o,bSubgridBitboard:a,activeSubgrid:l}=this.currentState,i=Math.floor(t[0]/3),s=Math.floor(t[1]/3),u=e.coordinate[0]%3,d=e.coordinate[1]%3,b=i+s*3,P=o[b],N=a[b],g=this.getTile(t);if(g!==null){debugger;throw new Error(`Tile already taken by ${g}`)}if(l!=="any"&&!w(l,[i,s]))throw new Error("Move is not in the active subgrid");this.currentState.moves.push(e),n==="X"?this.currentState.aSubgridBitboard[b]=h(P,u,d):this.currentState.bSubgridBitboard[b]=h(N,u,d),this.currentState.activeSubgrid=[u,d],this.checkWinSubgrid([u,d])!=="none"&&(this.currentState.activeSubgrid="any"),this.currentState.playerToMove=M(n),this.currentState.complete=this.checkWinWholeBoard()!=="none",this.onMove(e)}undoMove(e){let{coordinate:t,player:n}=e;this.currentState.moves.pop();let o=Math.floor(t[0]/3),a=Math.floor(t[1]/3),l=t[0]%3,i=t[1]%3,s=o+a*3,u=this.currentState.aSubgridBitboard[s],d=this.currentState.bSubgridBitboard[s];n==="X"?this.currentState.aSubgridBitboard[s]=x(u,l,i):this.currentState.bSubgridBitboard[s]=x(d,l,i),this.currentState.activeSubgrid=e.currentSubgrid,this.currentState.playerToMove=n,this.currentState.complete=!1}legalMoves(){if(this.currentState.complete)return[];let{activeSubgrid:e}=this.currentState,t=[];for(let n=0;n<3;n++)for(let o=0;o<3;o++)this.checkWinSubgrid([n,o])==="none"&&(e==="any"||w(e,[n,o]))&&t.push(...this.legalMovesSubgrid([n,o]));return t}getTile(e){let{aSubgridBitboard:t,bSubgridBitboard:n}=this.currentState,o=Math.floor(e[0]/3),a=Math.floor(e[1]/3),l=o+a*3,i=t[l],s=n[l],u=e[0]%3,d=e[1]%3;return p(i,u,d)?"X":p(s,u,d)?"O":null}legalMovesSubgrid(e){let{aSubgridBitboard:t,bSubgridBitboard:n}=this.currentState,o=e[0]+e[1]*3,a=t[o],l=n[o],i=[];for(let s=0;s<3;s++)for(let u=0;u<3;u++)p(a,s,u)||p(l,s,u)||i.push({coordinate:[e[0]*3+s,e[1]*3+u],player:this.currentState.playerToMove,currentSubgrid:e});return i}hash(){return this.currentState.moves.map(e=>e.coordinate.join(e.player)).join(" ")}onMove(e){}};var y=r=>`${r.coordinate.join(r.player)}`,S=class r{constructor(e,t,n,o){this.play=t,this.state=n,this.n_plays=0,this.n_wins=0,this.parent=e,this.children=new Map;for(let a of o)this.children.set(y(a),{play:a,node:null})}childNode(e){let t=this.children.get(y(e));if(t===void 0)throw new Error("Child not found");if(t.node===null)throw new Error("Child not expanded");return t.node}expand(e,t,n){if(!this.children.has(y(e)))throw new Error("Child not found");let o=new r(this,e,t,n);return this.children.set(y(e),{play:e,node:o}),o}allPlays(){return Array.from(this.children.values()).map(e=>e.play)}unexpandedPlays(){return Array.from(this.children.values()).filter(e=>e.node===null).map(e=>e.play)}isFullyExpanded(){return Array.from(this.children.values()).every(e=>e.node!==null)}isLeaf(){return this.children.size===0}getUCB1(e){if(this.parent===null)throw new Error("UCB1 not defined for root node");return this.n_wins/this.n_plays+Math.sqrt(e*Math.log(this.parent.n_plays)/this.n_plays)}},m=class{constructor(e,t=2){this.game=e,this.UCB1ExploreParam=t,this.nodes=new Map}runSearch(e,t=3){this.makeNode(e);let n=0,o=Date.now()+t*1e3;for(;Date.now()<o;){let a=this.select(e),l=a.state.checkWinWholeBoard();a.isLeaf()===!1&&l==="none"&&(a=this.expand(a),l=this.simulate(a)),this.backpropagate(a,l),n++}console.log("runSearch",n)}makeNode(e){if(!this.nodes.has(e.hash())){let t=e.legalMoves().slice(),n=new S(null,null,e,t);this.nodes.set(e.hash(),n)}}bestPlay(e){this.makeNode(e);let t=this.nodes.get(e.hash()),n=t.allPlays(),o,a=-1/0;for(let l of n){let i=t.childNode(l);i.n_plays!==0&&i.n_plays>a&&(o=l,a=i.n_plays)}if(o===void 0)throw new Error("No best play found. Was bestPlay called on a leaf node?");return o}select(e){let t=this.nodes.get(e.hash());for(;t.isFullyExpanded()&&!t.isLeaf();){let n=t.allPlays(),o,a=-1/0;for(let l of n){let i=t.childNode(l).getUCB1(this.UCB1ExploreParam);i>a&&(o=l,a=i)}if(o===void 0)throw new Error("No best play found. Was select called on a leaf node?");t=t.childNode(o)}return t}expand(e){let t=e.unexpandedPlays(),n=t[Math.floor(Math.random()*t.length)],o=e.state.copy();o.doMove(n);let a=o.legalMoves(),l=e.expand(n,o,a);return this.nodes.set(o.hash(),l),l}simulate(e){let t=e.state.copy(),n=t.checkWinWholeBoard();for(;n==="none";){let o=t.legalMoves(),a=o[Math.floor(Math.random()*o.length)];t.doMove(a),n=t.checkWinWholeBoard()}return n}backpropagate(e,t){let n=e;for(;n!==null;)n.n_plays+=1,M(n.state.currentState.playerToMove)===t&&(n.n_wins+=1),n=n.parent}getStats(e){let t=this.nodes.get(e.hash()),n={n_plays:t.n_plays,n_wins:t.n_wins,children:[]};for(let o of t.children.values())o.node===null?n.children.push({play:o.play,n_plays:null,n_wins:null}):n.children.push({play:o.play,n_plays:o.node.n_plays,n_wins:o.node.n_wins});return n}};var c=new f,v=new m(c);self.onmessage=function(r){let{type:e,payload:t}=r.data;if(e==="playerMove")c.doMove(t.move);else if(e==="getAIMove"){console.log("getAIMove"),v.runSearch(c,.2);let n=v.bestPlay(c),o=v.getStats(c);c.doMove(n),self.postMessage({bestMove:n,stats:o})}};})();
